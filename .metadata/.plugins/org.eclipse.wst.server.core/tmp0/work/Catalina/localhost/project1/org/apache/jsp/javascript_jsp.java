/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.0.23
 * Generated at: 2023-09-06 01:48:14 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class javascript_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=EUC-KR");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"EUC-KR\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("let arr = [1,2,3];\r\n");
      out.write("arr[3] = 4;\r\n");
      out.write("\r\n");
      out.write("for(i=0;i<arr.length;i++){\r\n");
      out.write("	document.write(arr[i]+\"<br/>\");\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("let arr2 = new Array();\r\n");
      out.write("arr2[0] = \"aaa\";\r\n");
      out.write("arr2[1] = \"bbb\";\r\n");
      out.write("\r\n");
      out.write("for(i=0;i<arr2.length;i++){\r\n");
      out.write("	document.write(arr2[i]+\"<br>\");\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("let obj = {\"name\":\"aaa\", \"age\":12, \"flag\":true};\r\n");
      out.write("document.write(\"name:\"+obj.name+\"<br>\");\r\n");
      out.write("document.write(\"age:\"+obj.age+\"<br>\");\r\n");
      out.write("document.write(\"flag:\"+obj.flag+\"<br>\");\r\n");
      out.write("\r\n");
      out.write("let arr3 = [{\"name\":\"aaa\", \"age\":12, \"flag\":true},\r\n");
      out.write("	{\"name\":\"bbb\", \"age\":22, \"flag\":false},\r\n");
      out.write("	{\"name\":\"ccc\", \"age\":33, \"flag\":true}];\r\n");
      out.write("	document.write(\"<br><br>\");\r\n");
      out.write("for(i=0; i<arr3.length;i++){\r\n");
      out.write("	document.write(\"name:\"+arr3[i].name+\" / \");\r\n");
      out.write("	document.write(\"age:\"+arr3[i].age+\" / \");\r\n");
      out.write("	document.write(\"flag:\"+arr3[i].flag);\r\n");
      out.write("	document.write(\"<br><br>	\");\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("//배열에서 요소를 하나씩 꺼내주는 것\r\n");
      out.write("for(let s of arr2){ // 값을 꺼내옴\r\n");
      out.write("	document.write(s+\"</br>\");\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("//객체에서 키를 하나씩 꺼내주는 것\r\n");
      out.write("for(let a in obj){ // 맴버변수슬 하나씩 꺼내서 씀\r\n");
      out.write("	document.write(a+\": \"+ obj[a]+\"</br>\");\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("document.write(\"<br>\");\r\n");
      out.write("\r\n");
      out.write("for(let o of arr3){\r\n");
      out.write("	for(let key in o){\r\n");
      out.write("		document.write(key+\": \"+o[key]+\" / \");\r\n");
      out.write("		\r\n");
      out.write("	}\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("document.write(\"테스트\");\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
