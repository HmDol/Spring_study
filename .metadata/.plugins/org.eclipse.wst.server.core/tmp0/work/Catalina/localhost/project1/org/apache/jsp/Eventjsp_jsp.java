/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.0.23
 * Generated at: 2023-09-06 03:21:52 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class Eventjsp_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=EUC-KR");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"EUC-KR\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<script>\r\n");
      out.write("window.onload = () => {\r\n");
      out.write("//초기화\r\n");
      out.write("	//alert('윈도우 로드됨');\r\n");
      out.write("}\r\n");
      out.write("const a = () => {\r\n");
      out.write("	alert(\"당신의 이름은 \"+f.t1.value+\"입니다.\");\r\n");
      out.write("}\r\n");
      out.write("const b = () => {\r\n");
      out.write("	//alert(\"결제금액은 \" + (f.t2.value * f.t3.value) + \"원 입니다.\");\r\n");
      out.write("	let span = document.getElementById(\"res\");\r\n");
      out.write("	span.innerHTML = (f.t2.value * f.t3.value) + \"원 입니다.\";\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("const c = () =>{\r\n");
      out.write("	f.t1.value=\"\";\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("const d = () => {\r\n");
      out.write("	let d1 = document.getElementById(\"d1\");\r\n");
      out.write("	d1.style.backgroundColor = \"orange\";\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("const e = () =>{\r\n");
      out.write("	let d1 = document.getElementById(\"d1\");\r\n");
      out.write("	d1.style.backgroundColor = \"\";\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("const func = () => {\r\n");
      out.write("	let len = f.t4.value.length;\r\n");
      out.write("	if(len>10){\r\n");
      out.write("		alert(\"10글자 내로 자성하시오\");\r\n");
      out.write("		f.t4.value = f.t4.value.subString(0,10);\r\n");
      out.write("	}\r\n");
      out.write("}\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("<form action=\"\" name=\"f\">\r\n");
      out.write("<input type=\"text\" name=\"t1\" value=\"이름입력하시오\" onfocus=\"c()\">\r\n");
      out.write("<input type=\"button\" nmae=\"b1\" value=\"이름확인\" onclick=\"a()\"><br>\r\n");
      out.write("가격: <input type=\"text\" name=\"t2\" value=\"1000\" readonly>\r\n");
      out.write("주문수량: <input type=\"number\" name=\"t3\" onchange=\"b()\" ><br>\r\n");
      out.write("결제금액 : <span id=\"res\"></span><br>\r\n");
      out.write("<div id=\"d1\" style=\"width:200px; height:200px; border:1px solid black;\" onmouseover=\"d()\" onmouseout=\"e()\">\r\n");
      out.write("마우스를 올리세요\r\n");
      out.write("가입인사(10글자 내로): <textarea row=\"3\" cols=\"20\" onkeydown=\"func()\" name =\"t4\"></textarea>\r\n");
      out.write("</div>\r\n");
      out.write("</form>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
